diff --git a/.gitattributes b/.gitattributes
new file mode 100644
index 0000000..dafb113
--- /dev/null
+++ b/.gitattributes
@@ -0,0 +1 @@
diff --git a/pom.xml b/pom.xml
index e750d2d..b982f46 100644
--- a/pom.xml
+++ b/pom.xml
@@ -34,11 +34,6 @@
         <artifactId>log4j-core</artifactId>
         <version>2.17.1</version>
     </dependency>
-    <dependency>
-      <groupId>com.v2gclarity.risev2g</groupId>
-      <artifactId>rise-v2g-shared</artifactId>
-      <version>1.2.6</version>
-    </dependency>
     <!-- https://mvnrepository.com/artifact/com.siemens.ct.exi/exificient -->
     <dependency>
         <groupId>com.siemens.ct.exi</groupId>
diff --git a/src/main/java/com/fluxlus/V2Gdecoder/V2Gdecoder.java b/src/main/java/com/fluxlus/V2Gdecoder/V2Gdecoder.java
index d66aa49..4484fcc 100644
--- a/src/main/java/com/fluxlus/V2Gdecoder/V2Gdecoder.java
+++ b/src/main/java/com/fluxlus/V2Gdecoder/V2Gdecoder.java
@@ -2,12 +2,12 @@ package com.fluxlus.V2Gdecoder;
 
 import com.fluxlus.V2Gdecoder.server.MultiThreadedServer;
 import java.io.IOException;
+import java.util.ArrayList;
 import org.apache.commons.cli.*;
 import org.xml.sax.SAXException;
 import com.siemens.ct.exi.core.exceptions.EXIException;
 import com.siemens.ct.exi.core.grammars.Grammars;	
 import com.siemens.ct.exi.grammars.GrammarFactory;
-import com.v2gclarity.risev2g.shared.enumerations.GlobalValues;
 import com.fluxlus.V2Gdecoder.dataprocess.*;
 
 /*
@@ -32,9 +32,12 @@ public class V2Gdecoder {
 		Option exiform = new Option("e", "exi", false, "EXI format");
 		exiform.setRequired(false);
 		options.addOption(exiform);
-		Option webserv = new Option("w", "web", false, "Webserver");
+		Option webserv = new Option("w", "web", true, "Webserver");
 		webserv.setRequired(false);
 		options.addOption(webserv);
+		Option schemas = new Option("S", "schema", true, "path to schema");
+		schemas.setRequired(true);
+		options.addOption(schemas);
 		
 		CommandLineParser parser = new DefaultParser();
 		HelpFormatter formatter = new HelpFormatter();
@@ -58,25 +61,20 @@ public class V2Gdecoder {
 		String result = null;
 
 		/* Initialize grammars */
-		Grammars[] grammars = {null, null, null};
+		ArrayList<Grammars> grammars = new ArrayList<Grammars>();
 
 		/* BOTTLENECK: slow operation */
-		try {
-			grammars[0] = GrammarFactory.newInstance().createGrammars("." + GlobalValues.SCHEMA_PATH_MSG_DEF.toString());
-		} catch (EXIException e) {
-			e.printStackTrace();			
-		}
-		try {
-			grammars[1] = GrammarFactory.newInstance().createGrammars("." + GlobalValues.SCHEMA_PATH_APP_PROTOCOL.toString());
-		} catch (EXIException e) {
-			e.printStackTrace();			
-		}
-		try {
-			grammars[2] = GrammarFactory.newInstance().createGrammars("." + GlobalValues.SCHEMA_PATH_XMLDSIG.toString());
-		} catch (EXIException e) {
-			e.printStackTrace();			
+		String[] schemas_vals = cmd.getOptionValues("schema");
+		for (String str : schemas_vals) {
+			Grammars entry = null;
+			try {
+				entry = GrammarFactory.newInstance().createGrammars(str);
+			} catch (EXIException e) {
+				e.printStackTrace();			
+			}
+			grammars.add(entry);
 		}
-
+		
         if (cmd.hasOption("xml"))
         { // We wan to encode a XML input
         	if (cmd.hasOption("file"))
@@ -89,7 +87,7 @@ public class V2Gdecoder {
     			if (cmd.hasOption("output"))
     				dmode = decodeMode.STRTOSTR;
     		}
-        	result = dataprocess.fuzzyExiEncoder(inputFilePath, dmode, grammars);
+        	result = dataprocess.Xml2ExiFull(inputFilePath, dmode, grammars.get(0));
         	if (!cmd.hasOption("output"))
         		System.out.println(result);
         } else if (cmd.hasOption("exi")) { // We wan to decode an EXI input
@@ -103,13 +101,18 @@ public class V2Gdecoder {
     			if (cmd.hasOption("output"))
     				dmode = decodeMode.STRTOFILE;
     		}
-        	result = dataprocess.fuzzyExiDecoded(inputFilePath, dmode, grammars);
+			try {
+        		result = dataprocess.Exi2Xml(inputFilePath, dmode, grammars.get(0));
+			} catch(Exception e) {
+				e.printStackTrace();
+			}
+
         	if (!cmd.hasOption("output"))
         	{ // output in stdout
         		System.out.println(result);
         	}
         } else if (cmd.hasOption("web")) { // run a encoder/decoder service on port TCP 9000
-            MultiThreadedServer server = new MultiThreadedServer(9000, grammars);
+            MultiThreadedServer server = new MultiThreadedServer(Integer.valueOf(cmd.getOptionValue("web")), grammars);
             new Thread(server).start();
         }
 	}
diff --git a/src/main/java/com/fluxlus/V2Gdecoder/dataprocess/dataprocess.java b/src/main/java/com/fluxlus/V2Gdecoder/dataprocess/dataprocess.java
index 0c1c446..0bf4269 100644
--- a/src/main/java/com/fluxlus/V2Gdecoder/dataprocess/dataprocess.java
+++ b/src/main/java/com/fluxlus/V2Gdecoder/dataprocess/dataprocess.java
@@ -17,9 +17,6 @@ import javax.xml.transform.TransformerFactory;
 import javax.xml.transform.sax.SAXSource;
 import javax.xml.transform.stream.StreamResult;
 
-import com.v2gclarity.risev2g.shared.enumerations.GlobalValues;
-// import com.v2gclarity.risev2g.shared.messageHandling.MessageHandler;
-// import com.v2gclarity.risev2g.shared.utils.MiscUtils;
 import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
 import org.xml.sax.XMLReader;
@@ -148,7 +145,7 @@ public class dataprocess {
 		return result;
 	}
 
-	public static String fuzzyExiEncoder(String xmlstr, decodeMode dmode, Grammars[] grammars) throws IOException, SAXException
+	public static String Xml2ExiFull(String xmlstr, decodeMode dmode, Grammars grammar) throws IOException, SAXException
 	{
 		/*
 		 * 		Enumerate V2G grammar to decode EXI data
@@ -159,7 +156,6 @@ public class dataprocess {
 
 		String result = null;
 		String inputsc = null;
-		Grammars grammar = null;
 
 		if (dmode == decodeMode.FILETOSTR || dmode == decodeMode.FILETOFILE)
 		{ // In case the input is a file
@@ -169,16 +165,6 @@ public class dataprocess {
 			inputsc = xmlstr;
 		}
 
-		/* Selects grammar intelligenly */
-		if (inputsc.contains("supportedAppProtocol"))
-		{ // select AppProtocol schema to set V2G grammar
-			grammar = grammars[1];
-		} else if (inputsc.contains("V2G_Message")) { // select MSG DEF
-			grammar = grammars[0];
-		} else { // XMLDSIG by default
-			grammar = grammars[2];
-		}
-
 		try {
 			result = Xml2Exi(inputsc, xmlstr, dmode, grammar);
 		} catch(EXIException e)
@@ -188,36 +174,4 @@ public class dataprocess {
 
 		return result;
 	}
-	
-	public static String fuzzyExiDecoded(String strinput, decodeMode dmode, Grammars[] grammars)
-	{
-		/*
-		 * 		Enumerate V2G grammar to decode EXI data
-		 * 		In(1): Input string
-		 * 		In(2): (decodeMode) Input/Output modes
-		 * 		Out: Decoded result string
-		 */
-	
-		String result = null;
-		
-		try {
-			result = Exi2Xml(strinput, dmode, grammars[0]);
-		} catch (Exception e1) {
-			try {
-				result = Exi2Xml(strinput, dmode, grammars[1]);
-			} catch (Exception e2) {
-				try {
-					result = Exi2Xml(strinput, dmode, grammars[2]);
-				} catch (EXIException e3) {
-					// do nothing
-					//e3.printStackTrace();
-				} catch (Exception b3) {
-					// do nothing
-					//b3.printStackTrace();
-				}
-			}
-		}
-		
-		return result;
-	}
 }
diff --git a/src/main/java/com/fluxlus/V2Gdecoder/server/MultiThreadedServer.java b/src/main/java/com/fluxlus/V2Gdecoder/server/MultiThreadedServer.java
index 8d1b8f7..a9fb7e2 100644
--- a/src/main/java/com/fluxlus/V2Gdecoder/server/MultiThreadedServer.java
+++ b/src/main/java/com/fluxlus/V2Gdecoder/server/MultiThreadedServer.java
@@ -3,6 +3,7 @@ package com.fluxlus.V2Gdecoder.server;
 import java.net.ServerSocket;
 
 import java.net.Socket;
+import java.util.ArrayList;
 import java.io.IOException;
 import com.siemens.ct.exi.core.grammars.Grammars;	
 
@@ -16,9 +17,9 @@ public class MultiThreadedServer implements Runnable{
     protected ServerSocket serverSocket = null;
     protected boolean      isStopped    = false;
     protected Thread       runningThread= null;
-    protected Grammars[]     grammars     = null;
+    protected ArrayList<Grammars>     grammars     = null;
 
-    public MultiThreadedServer(int port, Grammars[] grammars){
+    public MultiThreadedServer(int port, ArrayList<Grammars> grammars){
         this.serverPort = port;
         this.grammars = grammars;
     }
diff --git a/src/main/java/com/fluxlus/V2Gdecoder/server/WorkerRunnable.java b/src/main/java/com/fluxlus/V2Gdecoder/server/WorkerRunnable.java
index f6ca95e..8610090 100644
--- a/src/main/java/com/fluxlus/V2Gdecoder/server/WorkerRunnable.java
+++ b/src/main/java/com/fluxlus/V2Gdecoder/server/WorkerRunnable.java
@@ -6,38 +6,39 @@ import java.io.OutputStream;
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.net.Socket;
+import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Map;
 
 import org.xml.sax.SAXException;
 
 import com.siemens.ct.exi.core.exceptions.EXIException;
-import com.siemens.ct.exi.core.grammars.Grammars;	
+import com.siemens.ct.exi.core.grammars.Grammars;
 
 import com.fluxlus.V2Gdecoder.dataprocess.dataprocess;
 import com.fluxlus.V2Gdecoder.dataprocess.decodeMode;
 
-public class WorkerRunnable implements Runnable{
+public class WorkerRunnable implements Runnable {
 
     protected Socket clientSocket = null;
-    protected String serverText   = null;
-    protected Grammars[] grammars   = null;
+    protected String serverText = null;
+    protected ArrayList<Grammars> grammars = null;
 
-    public WorkerRunnable(Socket clientSocket, Grammars[] grammars, String serverText) {
+    public WorkerRunnable(Socket clientSocket, ArrayList<Grammars> grammars, String serverText) {
         this.clientSocket = clientSocket;
-        this.serverText   = serverText;
-        this.grammars     = grammars;
-    } 
-    
+        this.serverText = serverText;
+        this.grammars = grammars;
+    }
+
     public static Map<String, String> parseHTTPHeaders(InputStream inputStream)
             throws IOException {
         int charRead;
         StringBuffer sb = new StringBuffer();
         while (true) {
             sb.append((char) (charRead = inputStream.read()));
-            if ((char) charRead == '\r') {          
-                sb.append((char) inputStream.read()); 
-                charRead = inputStream.read();       
+            if ((char) charRead == '\r') {
+                sb.append((char) inputStream.read());
+                charRead = inputStream.read();
                 if (charRead == '\r') {
                     sb.append((char) inputStream.read());
                     break;
@@ -56,57 +57,57 @@ public class WorkerRunnable implements Runnable{
 
         return headers;
     }
-    
+
     public static String parseHTTPBody(InputStream inputStream)
             throws IOException {
-    	StringBuilder stringBuilder = new StringBuilder();
-    	int length = inputStream.available();
-    	InputStreamReader test = new InputStreamReader(inputStream);
-    	
-    	BufferedReader bufferedReader = new BufferedReader(test);
+        StringBuilder stringBuilder = new StringBuilder();
+        int length = inputStream.available();
+        InputStreamReader test = new InputStreamReader(inputStream);
+
+        BufferedReader bufferedReader = new BufferedReader(test);
         char[] charBuffer = new char[4096];
         int bytesRead;
-        
+
         while ((bytesRead = bufferedReader.read(charBuffer)) > 0) {
-        	stringBuilder.append(charBuffer, 0, bytesRead);
+            stringBuilder.append(charBuffer, 0, bytesRead);
             if (stringBuilder.length() <= length) {
-            	break;
+                break;
             }
         }
 
-       return stringBuilder.toString();
+        return stringBuilder.toString();
     }
-    
+
     public void run() {
         try {
-            InputStream input  = clientSocket.getInputStream();
+            InputStream input = clientSocket.getInputStream();
             OutputStream output = clientSocket.getOutputStream();
-            //long time = System.currentTimeMillis();
+            // long time = System.currentTimeMillis();
             Map<String, String> headers = parseHTTPHeaders(input);
-            System.out.println(headers);
+            //System.out.println(headers);
             String body = parseHTTPBody(input);
             String result = null;
-            System.out.println(headers.get("Format").toString());
-            
-            if (headers.get("Format").contains("EXI"))
-            {
-            	result = dataprocess.fuzzyExiDecoded(body, decodeMode.STRTOSTR, this.grammars);
-            } else {
-            	try {
-					result = dataprocess.fuzzyExiEncoder(body, decodeMode.STRTOSTR, this.grammars);
-				} catch (Exception e) {
-					// TODO Auto-generated catch block
-					e.printStackTrace();
-				}
-            }  
-            //System.out.println(result);
+            //System.out.println(headers.get("Format").toString() + " : " + headers.get("Grammar").toString());
+
+            Grammars grammar = this.grammars.get(Integer.parseInt(headers.get("Grammar").toString()));
+
+            try {
+                if (headers.get("Format").equals("EXI")) {
+                    result = dataprocess.Exi2Xml(body, decodeMode.STRTOSTR, grammar);
+                } else if (headers.get("Format").equals("XML")) {
+                    result = dataprocess.Xml2ExiFull(body, decodeMode.STRTOSTR, grammar);
+                }
+            } catch(Exception e) {
+                e.printStackTrace();
+            }
+            // System.out.println(result);
             output.write(("HTTP/1.1 200 OK\n\n" + result +
-            		"").getBytes());
+                    "").getBytes());
             output.close();
             input.close();
-            
+
         } catch (IOException e) {
-            //report exception somewhere.
+            // report exception somewhere.
             e.printStackTrace();
         }
     }
